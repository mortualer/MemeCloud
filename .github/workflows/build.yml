name: Build MemeCloud APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì¶ Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip openjdk-17-jdk \
            python3-pip autoconf libtool pkg-config \
            zlib1g-dev libncurses5-dev libtinfo5 \
            cmake libffi-dev libssl-dev \
            curl wget unzip

      - name: üîß Force Java 17 for entire system
        run: |
          sudo update-alternatives --set java /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/temurin-17-jdk-amd64/bin/javac
          echo "JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64" >> $GITHUB_ENV
          echo "=== Java Version ==="
          java -version

      - name: üîß Install Buildozer and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer
          pip install Cython==0.29.33
          pip install python-for-android

      - name: üõ†Ô∏è Complete Android SDK setup with Java 17
        run: |
          set -e
          echo "üõ†Ô∏è Setting up Android SDK with Java 17..."
          
          ANDROID_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$ANDROID_SDK_DIR"
          
          # Download command line tools
          cd "$ANDROID_SDK_DIR"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d cmdline-tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
          rm cmdline-tools.zip
          
          export ANDROID_HOME="$ANDROID_SDK_DIR"
          export ANDROID_SDK_ROOT="$ANDROID_HOME"
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
          
          # Accept licenses
          mkdir -p "$ANDROID_HOME/licenses"
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$ANDROID_HOME/licenses/android-sdk-license"
          
          # Install required components with Java 17
          yes | sdkmanager --install "platform-tools" 2>&1 | grep -v "Warning" || true
          yes | sdkmanager --install "platforms;android-33" 2>&1 | grep -v "Warning" || true
          yes | sdkmanager --install "build-tools;33.0.2" 2>&1 | grep -v "Warning" || true
          
          # Create necessary symlinks for Buildozer
          mkdir -p "$ANDROID_HOME/tools/bin"
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" "$ANDROID_HOME/tools/bin/sdkmanager" 2>/dev/null || true
          
          echo "‚úÖ Android SDK setup completed"

      - name: üèóÔ∏è Build APK (Debug - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        run: |
          set -e
          echo "üöÄ Starting APK build process..."
          
          # Set environment variables
          export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
          export ANDROID_SDK_ROOT="$ANDROID_HOME"
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/33.0.2:$PATH"
          
          echo "=== Final Environment Check ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "Java: $(java -version 2>&1 | head -1)"
          echo "sdkmanager: $(which sdkmanager)"
          echo "aidl exists: $(ls -la $ANDROID_HOME/build-tools/33.0.2/aidl 2>/dev/null && echo 'YES' || echo 'NO')"
          
          # Clean previous builds
          buildozer android clean
          
          # Build debug version first (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞)
          buildozer -v android debug

      - name: üîç Check build errors
        if: always()
        run: |
          echo "=== Checking for build errors ==="
          if [ -f "build_output.log" ]; then
            echo "Last 50 lines of build output:"
            tail -50 build_output.log
            echo ""
            echo "=== ERRORS FOUND ==="
            grep -i "error\|failed\|exception" build_output.log | tail -20 || echo "No errors found"
          else
            echo "No build_output.log found"
          fi

      - name: üì§ Collect APK files
        run: |
          mkdir -p artifacts
          echo "üîé Searching for APK files..."
          
          find . -name "*.apk" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
          
          if [ -d "./bin" ]; then
            find ./bin -name "*.apk" -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
          
          if [ -d "./.buildozer" ]; then
            find ./.buildozer -name "*.apk" -exec cp {} artifacts/ \; 2>/dev/null || true
          fi
          
          APK_COUNT=$(find artifacts -name "*.apk" 2>/dev/null | wc -l)
          if [ "$APK_COUNT" -eq "0" ]; then
            echo "‚ùå No APK files found"
            echo "Build failed" > artifacts/debug-info.txt
            # Show what's in bin directory
            echo "Contents of bin directory:"
            ls -la ./bin/ 2>/dev/null || echo "No bin directory"
          else
            echo "‚úÖ Found $APK_COUNT APK file(s)"
            ls -la artifacts/
          fi

      - name: üìã Save build logs
        if: always()
        run: |
          mkdir -p logs
          echo "üíæ Saving build logs..."
          
          # Save main build log
          if [ -f "build_output.log" ]; then
            cp build_output.log logs/
          else
            echo "No build_output.log found" > logs/no_build_log.txt
          fi
          
          # Save other logs
          find . -name "*.log" -not -path "./logs/*" -exec cp {} logs/ \; 2>/dev/null || true
          cp buildozer.spec logs/ 2>/dev/null || true
          
          echo "üìÑ Log files saved:"
          ls -la logs/

      - name: üöÄ Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MemeCloud-APK
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

      - name: üìÑ Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: logs/
          retention-days: 7
          if-no-files-found: warn

      - name: üìä Build Summary
        if: always()
        run: |
          echo "=== BUILD SUMMARY ==="
          if [ -f "artifacts/debug-info.txt" ]; then
            echo "‚ùå BUILD FAILED"
            echo "Check Build-Logs artifact for details"
          else
            APK_COUNT=$(find artifacts -name "*.apk" 2>/dev/null | wc -l)
            if [ "$APK_COUNT" -gt "0" ]; then
              echo "‚úÖ BUILD SUCCESSFUL"
              echo "Generated $APK_COUNT APK file(s)"
            else
              echo "‚ö†Ô∏è BUILD COMPLETED BUT NO APK FOUND"
            fi
          fi
