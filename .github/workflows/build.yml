name: Build MemeCloud APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 150

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip openjdk-17-jdk \
            python3-pip autoconf libtool pkg-config \
            zlib1g-dev libncurses5-dev libtinfo5 \
            cmake libffi-dev libssl-dev \
            curl wget unzip

      - name: 🔧 Set Java 17 as default
        run: |
          sudo update-alternatives --set java /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/temurin-17-jdk-amd64/bin/javac
          java -version
          javac -version

      - name: 🔧 Install Buildozer
        run: |
          python -m pip install --upgrade pip
          pip install buildozer
          pip install Cython==0.29.33

      - name: 🗑️ Clean previous build
        run: |
          buildozer android clean 2>/dev/null || true
          rm -rf .buildozer bin 2>/dev/null || true

      - name: 📝 Force Android SDK installation
        run: |
          echo "🛠️ Forcing Android SDK installation..."
          mkdir -p ~/.android
          touch ~/.android/repositories.cfg
          
          # Удаляем старый SDK и заставляем Buildozer переустановить
          rm -rf $HOME/.buildozer/android/platform/android-sdk 2>/dev/null || true
          
          # Запускаем установку SDK через Buildozer
          buildozer android update sdk --no-download 2>&1 | tee sdk_install.log || true

      - name: 🔧 Fix SDK manager path
        run: |
          echo "🔧 Fixing SDK manager path..."
          ANDROID_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
          
          # Проверяем что есть cmdline-tools
          if [ -d "$ANDROID_SDK_DIR/cmdline-tools" ]; then
            echo "✅ cmdline-tools found"
            # Создаем symlink для обратной совместимости
            mkdir -p "$ANDROID_SDK_DIR/tools/bin" 2>/dev/null || true
            ln -sf "$ANDROID_SDK_DIR/cmdline-tools/latest/bin/sdkmanager" "$ANDROID_SDK_DIR/tools/bin/sdkmanager" 2>/dev/null || true
          else
            echo "❌ cmdline-tools not found, listing SDK directory:"
            ls -la "$ANDROID_SDK_DIR/" 2>/dev/null || echo "SDK directory not found"
          fi

      - name: 🏗️ Build APK with retry
        run: |
          set -e
          echo "🚀 Starting APK build process..."
          
          # Первая попытка
          if buildozer -v android debug 2>&1 | tee build_output.log; then
            echo "✅ Build successful on first attempt"
          else
            echo "⚠️ First attempt failed, cleaning and retrying..."
            buildozer android clean
            echo "🔄 Second attempt..."
            buildozer -v android debug 2>&1 | tee build_retry.log
            echo "✅ Build successful on second attempt"
          fi

      - name: 📤 Collect APK files
        run: |
          mkdir -p artifacts
          echo "🔎 Searching for APK files..."
          
          # Ищем APK для всех архитектур
          find . -name "*.apk" -type f -exec cp {} artifacts/ \; 2>/dev/null || true
          
          if [ -d "./bin" ]; then
            cp ./bin/*.apk artifacts/ 2>/dev/null || true
          fi
          
          APK_COUNT=$(find artifacts -name "*.apk" 2>/dev/null | wc -l)
          if [ "$APK_COUNT" -eq "0" ]; then
            echo "❌ No APK files found"
            echo "Build failed - check logs" > artifacts/debug-info.txt
            # Показываем структуру для отладки
            echo "=== Buildozer structure ===" >> artifacts/debug-info.txt
            find ./.buildozer -type d 2>/dev/null | head -30 >> artifacts/debug-info.txt
          else
            echo "✅ Found $APK_COUNT APK file(s)"
            echo "APK files:"
            ls -la artifacts/
          fi

      - name: 📋 Save build logs
        if: always()
        run: |
          mkdir -p logs
          echo "💾 Saving build logs..."
          
          cp build_output.log logs/ 2>/dev/null || echo "No build_output.log" > logs/no_logs.txt
          cp build_retry.log logs/ 2>/dev/null || true
          cp sdk_install.log logs/ 2>/dev/null || true
          find . -name "*.log" -not -path "./logs/*" -exec cp {} logs/ \; 2>/dev/null || true
          cp buildozer.spec logs/ 2>/dev/null || true
          
          echo "📄 Log files:"
          ls -la logs/

      - name: 🚀 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MemeCloud-APK
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

      - name: 📄 Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: logs/
          retention-days: 7
          if-no-files-found: warn
